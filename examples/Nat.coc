import "Util.coc" {the}
import "pair.coc" {pair head tail}
import "Bool.coc" {Bool true false}
import "equality.coc" {equality reflexivity extensionalityaxiom typeextensionalityaxiom}

// We need to quantify over the domain that we're composing over
define Nat =
{\D:*.
 // Now we encode the meaning of "natural number", that is,
 // it takes in a function over this domain
 // and returns a function and returns a function over this domain.
 (D->D)->(D->D)};

define zero =
(\D:*.(\f:D->D.(\x:D.
                x)));

define succ =
(\n:Nat.(\D:*.(\f:D->D.(\x:D.f (n D f x)))));

define one =
succ zero;

define two =
succ one;

define three =
succ two;

define four =
succ three;

define five =
succ four;

define pred =
(\n:Nat.
 head Nat Nat
 (n
  (PairOf Nat Nat)
  (\p:(PairOf Nat Nat).
   pair Nat Nat
   (tail Nat Nat p)
   (succ (tail Nat Nat p)))
  (pair Nat Nat zero zero)));

define add =
(\a:Nat.
 (\b:Nat.
  a Nat succ b));

define mult =
(\a:Nat.
 (\b:Nat.
  a Nat (add b) zero));

define exp =
(\a:Nat.
 (\b:Nat.
  (\D:*.
   b (D->D) (a D))));

define iszero =
(\n:Nat.
 n Bool (\_:Bool.false) true);

define ifzero =
(\n:Nat.
 (\A:*.
  (\ifiszero:A.
   (\ifnotzero:A.
    n A (\_:A.ifnotzero) ifiszero))));

define commutativityaddsucc =
{\a:Nat.
 {\b:Nat.
  (equality Nat (add (succ a) b) (succ (add a b)))}};

define addsuccab = (\a:Nat.(\b:Nat.(add (succ a) b)));
define succaddab = (\a:Nat.(\b:Nat.(succ (add a b))));

define commutativityaddsuccproof =
(\p:commutativityaddsucc.p)
(\a:Nat.
 (\b:Nat.
   the (equality Nat (add (succ a) b) (succ (add a b)))
   (reflexivity Nat (add (succ a) b))
   ));

define inductionaxiom =
{\P:Nat->*.
 {\Pzero:P zero.
  {\Psucc:{\n:Nat.(P n) -> (P (succ n))}.
   {\n:Nat.
    P n}}}};

define addLeftNeutral =
(\n:Nat.
 the (equality Nat n (add zero n))
 (reflexivity Nat n));

define addRightNeutral =
(\induction:inductionaxiom.
 (\no:Nat.
  the (equality Nat no (add no zero))
  (induction
   (\np:Nat.equality Nat np (add np zero))
   (reflexivity Nat zero)
   (\ni:Nat.
    (\IH:equality Nat ni (add ni zero).
     IH (\x:Nat.equality Nat (succ ni) (succ x))
     (reflexivity Nat (succ ni))))
   no)));

define addSuccLeftSucc =
(\a:Nat.
 (\b:Nat.
  the (equality Nat (succ (add a b)) (add (succ a) b))
  (reflexivity Nat (succ (add a b)))));

define addSuccRightSucc =
(\induction:inductionaxiom.
 (\a:Nat.
  (\b:Nat.
   the (equality Nat (succ (add a b)) (add a (succ b)))
   (induction
    (\ai:Nat.equality Nat (succ (add ai b)) (add ai (succ b)))
    (reflexivity Nat (succ b))
    (\ai:Nat.
     (\IH:equality Nat (succ (add ai b)) (add ai (succ b)).
      IH (\x:Nat.equality Nat (succ (add (succ ai) b)) (succ x))
      (reflexivity Nat (succ (add (succ ai) b)))))
    a))));

define addCommutative =
(\induction:inductionaxiom.
 (\a:Nat.
  (\b:Nat.
   the (equality Nat (add a b) (add b a))
   (induction
    (\ai:Nat.equality Nat (add ai b) (add b ai))
    (addRightNeutral induction b)
    (\ai:Nat.
     (\IH:equality Nat (add ai b) (add b ai).
      symmetry Nat (add ai b) (add b ai) IH (\x:Nat.equality Nat (succ x) (add b (succ ai)))
      (addSuccRightSucc induction b ai)))
    a))));

define xismultonex =
(\ext:extensionalityaxiom.
 (\text:typeextensionalityaxiom.
  the {\x:Nat.(equality Nat x (mult one x))}
  // your answer
  (\x:Nat.
   text (\T:*.(T->T)->T->T) x (mult one x)
   (\T:*.
    ext (T->T) (\f:T->T.T->T) (x T) (mult one x T)
    (\f:T->T.
     ext T (\i:T.T) (x T f) (mult one x T f)
     (\i:T.
      reflexivity T (mult one x T f i)))))));

define oneisexpxzero =
(\ext:extensionalityaxiom.
 (\text:typeextensionalityaxiom.
  the {\x:Nat.(equality Nat one (exp x zero))}
  // your answer
  (\x:Nat.
   text (\T:*.(T->T)->T->T) one (exp x zero)
   (\T:*.
    ext (T->T) (\f:T->T.T->T) (one T) (exp x zero T)
    (\f:T->T.
     ext T (\i:T.T) (one T f) (exp x zero T f)
     (\i:T.
      reflexivity T (one T f i)))))));

define tests =
(\exp22:Nat.
 (\pred0:Nat.
  (\pred1:Nat.
   (\pred2:Nat.Nat))))
(exp two two)
(pred zero)
(pred one)
(pred two);
