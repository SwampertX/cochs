import "Either.coc" { Either left right cases }
import "pair.coc" { PairOf pair }

define Bot = {\A:*.A};

define neg =
(\P:*.P->{\Z:*.Z});

define negalt =
(\P:*.{\Z:*.P->Z});

define LEM =
{\P:*.Either P (neg P)};

define Peirce =
{\A:*.{\B:*.((A->B)->A)->A}};

define negAorBimpAarrowB =
(\typecheck:{\A:*.{\B:*.(Either (neg A) B)->(A->B)}}.
 typecheck)
(\A:*.
 (\B:*.
  (\e:(Either (neg A) B).
   (\a:A.
    e B (\nega:(neg A).nega a B) (\b:B.b)))));

define AarrowBimpnegAorB =
(\typecheck:LEM->{\A:*.{\B:*.(A->B)->(Either (neg A) B)}}.
 typecheck)
(\lem:LEM.
 (\A:*.
  (\B:*.
   (\arrow:A->B.
    lem A (Either (neg A) B) (\a:A.right (neg A) B (arrow a)) (\nega:(neg A).left (neg A) B nega)
    ))));

define negequivnegalt =
(\negequivnegalt:{\P:*.PairOf ((neg P)->(negalt P)) ((negalt P)->(neg P))}.
  negequivnegalt)
(\P:*.
  pair ((neg P)->(negalt P)) ((negalt P)->(neg P))
 (\negp:(neg P).
  (\Z:*.
   (\p:P.
    negp p Z)))
 (\negaltp:(negalt P).
  (\p:P.
   (\Z:*.
    negaltp Z p))));

define PeirceimpLEM =
(\peirceimplem:Peirce->LEM.peirceimplem)
(\peirce:Peirce.
 (\P:*.
  peirce (Either P (neg P)) Bot
  (\eitherimpbot:(Either P (neg P))->Bot.
   right P (neg P) (\p:P.eitherimpbot (left P (neg P) p)))));

define LEMimpPeirce =
(\lemimppeirce:LEM->Peirce.lemimppeirce)
(\lem:LEM.
 (\A:*.
  (\B:*.
   (\aba:(A->B)->A.
    cases A (neg A) A (lem A) (\a:A.a) (\nega:neg A.aba (\a:A.nega a B))))));
