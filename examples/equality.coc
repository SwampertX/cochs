define equality =
(\T:*.
 (\x:T.
  (\y:T.
   {\P:T->*.
    (P x)->(P y)})));

define reflexivityofequality =
{\A:*.
 {\a:A.
  equality A a a}};

define reflexivity =
(\A:*.
 (\a:A.
  the (equality A a a)
  // we want to output something of type
  //   (equality A a a)
  // which is secretly
  //   {\z:A->*.((z a)->(z a))}
  (\P:A->*.
   (\proofofPa:(P a).
    proofofPa))));

define symmetryofequality =
{\A:*.
 {\a:A.
  {\b:A.
   (equality A a b)->
   (equality A b a)}}};

define symmetry =
(\A:*.
 (\a:A.
  (\b:A.
   (\proofthataequalb:(equality A a b).
    the (equality A b a)
    (
     // This thing takes in a function f of type A->*,
     // and outputs a converter function from (f a) to (f b)
     proofthataequalb

     // This thing below takes in a value X and turns it into a type that represents X = a

     (\x:A.(equality A x a))

    // So this thing we just made converts proofs that (f a) to (f b)
    // i.e. it converts proofs that a = a to proofs that b = a.

    // So we give it a proof that a = a...
    // And now we should have a proof that b = a.
    (reflexivity A a))))));

define transitivityofequality =
{\A:*.
 {\a:A.
  {\b:A.
   {\c:A.
    (equality A a b)->
    (equality A b c)->
    (equality A a c)}}}};

define transitivity =
(\A:*.
 (\a:A.
  (\b:A.
   (\c:A.
    the ((equality A a b)->(equality A b c)->(equality A a c))
    (\aeqb:(equality A a b).
     (\beqc:(equality A b c).
      // We want to output something of type
      //    (equality A a c)
      // aka
      //    {\P:A->*.((P a)->(P c))}
      (\P:A->*.
       (\Pholdsona:(P a).
        // So this should be of type (P c)
        (beqc P (aeqb P Pholdsona))))))))));

define welldefinednessofequality =
{\A:*.
 {\B:*.
  {\f:A->B.
   {\xa:A.
    {\ya:A.
     (equality A xa ya) ->
     (equality B (f xa) (f ya))}}}}};

define welldefinedness =
(\p:welldefinednessofequality.p)
(\A:*.
 (\B:*.
  (\f:A->B.
   (\a:A.
    (\b:A.
     (\aeqb:(equality A a b).

      aeqb

      (\x:A.
       equality B (f a) (f x))

      (reflexivity B (f a))))))));

define extensionalityaxiom =
{\A:*.
 {\B:A->*.
  {\x:{\a:A.B a}.
   {\y:{\a:A.B a}.
    {\a:A.equality (B a) (x a) (y a)}->(equality {\a:A.B a} x y)}}}};

define typeextensionalityaxiom =
{\B:*->*.
 {\x:{\A:*.B A}.
  {\y:{\A:*.B A}.
   {\A:*.equality (B A) (x A) (y A)}->(equality {\A:*.B A} x y)}}};

define equalitytests =
(\refl:reflexivityofequality.
(\sym:symmetryofequality.
(\trans:transitivityofequality.
(\def:welldefinednessofequality.
refl))))
reflexivity
symmetry
transitivity
welldefinedness;
