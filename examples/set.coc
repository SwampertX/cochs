// Idea is if we have P = A -> *,
// then we can ask ourselves if the type (P x) : * is inhabited.

// So if types are true/false depending on if they are inhabited,
// then P is some proposition
// that is true/false depending on what its argument is.

// inter is about taking some propclass as input,
// which is supposed to be some
// proposition of propositions P = (A -> *) -> *
// aka some class of propositions
// (you give me a proposition i'll tell you if it's inside my class)

// Then we want to return the "intersection" proposition,
// some proposition meaning it has type A -> *,
// such that it's only true
// whenever every other proposition in our class is true,
// for any given parameter a : A.

define inter =
(\A0:*.
 (\propclass:(A0->*)->*.
  (\term:A0.
   // This is the type we want to be inhabited
   // iff term satisfies the proposition (inter propclass),
   // which means we want this type to be inhabited
   // iff forall P,
   //   (P satisfies propclass) => (term satisfies P).

   // Here's the forall P,
   // if P is in propclass
   // then term satisfies P
   {\P:A0->*.
    {\arbitraryprop:(propclass P).
     (P term)}})));

// We want to prove some higher order theorems.
// So what we want to show is that the intersection of a propclass
// is a subset of any proposition in the propclass.
// To do that we need a `subset` prop with type
// (A -> *) -> (A -> *) -> *
// such that (subset A0 prop1 prop2) is inhabited
// iff every term that satisfies prop1 satisfies prop2.

// In the future,
// what we want to show is that
// // Forall props which are in propclass
// // inter propclass is a subset of prop.
// (\prop:{\_:A.*}.
//  (\propisinpropclass:(propclass prop).
//   (subset A0 (inter A0 propclass) prop)))

define subset =
(\A0:*.
 (\prop1:A0->*.
  (\prop2:A0->*.
   // We want to output a type which is inhabited
   // iff prop1 is a subset of prop2

   // Forall proofs that prop1 is true, prop2 is true
   {\testproof:A0.
    ((prop1 testproof)->(prop2 testproof))})));

// i.e. it proves that for any propclass,
// and any prop,
// if prop is in propclass,
// then the intersection of propclass will be a subset of prop.

define interissubset =
{\A0:*.
 {\propclass:(A0->*)->*.
  {\prop:A0->*.
   {\proofthatpropisinpropclass:(propclass prop).
    (subset A0 (inter A0 propclass) prop)}}}};

define proofinterissubset =
(\A0:*.
 (\propclass:(A0->*)->*.
  (\prop:A0->*.
   (\proofthatpropisinpropclass:(propclass prop).
    (\term:A0.
     (\proofthattermsatisfiesprop1:(inter A0 propclass term).
      proofthattermsatisfiesprop1 prop proofthatpropisinpropclass))))));
